# Dicas Atom
https://atom.io/packages/angular-snippets

# Configurações iniciais

mkdir B-Wing
cd B-Wing
mkdir server
cd server
npm init --yes
npm i express morgan promise-mysql cors

Agora você sabe que deve utilizar o --save somente para instalar módulos que serão usados em produção, e o --save-dev somente para módulos que serão usados no momento do desenvolvimento.
=> npm i
=> npm i --production

mkdir src
cd src
criar index.ts

------------------------------------------------------------------
https://vijayjakhar.com/how-to-run-php-and-phpmyadmin-with-cloud9/
------------------------------------------------------------------
Step 1 :- Create a Account with Cloud9 at https://c9.io/
Step 2 :- Move to Dashboard and Create New Workspace
Step 3 :- Open Workspace and Start Editing
Step 4 :- Now Start Mysql with Command ( mysql-ctl start ).
Step 5 :- Install phpmyadmin with ( phpmyadmin-ctl install )
Step 6 :- Run mysql with ( mysql-ctl cli ) and find Hostname with command ( SHOW VARIABLES WHERE Variable_name = ‘hostname’; )
Step 7 :- Run your php with http://(workspace Name)-(username).c9users.io/ like http://php-uname.c9users.io/
Step 8 :- Run php myadmin with https://php-uname.c9.io/phpmyadmin with username and without password
------------------------------------------------------------------


## em server:
npm install -g typescript   (global, já instalado)
tsc --init  (para inicializar o typescript)

## mudar no tsconfig.json
target: es6
outDir: ./build

## rodar para montar o diretorio build:
tsc (para compilar o TS)

node build/index.js    mostras o conteúdo do JS

No package.json mudar
"scripts": {
  "build": "tsc -w"
},

## e depois basta rodar esse script via npm para compilar as alterações:
npm run build  (Obs.: ao alterar o TS já é compilado para o JS)



## Abrir outro terminal:

para carregar as dependencies:
npm i nodemon -D

No package.json mudar
"scripts": {
  "build": "tsc -w"
  "dev": "nodemon build/index.js"
},

## Rodar "dev" para executar o JS compilado
npm run dev



# SERVER SETTINGS (Usar express E node)

em server rodar para instalar as dependencies para o express
npm i @types/express -D


## Preencher o index.ts com informações do server e acessar a porta 3000 do localhost

## Criar os arquivos de Rotas
indexRoutes => esta rota vai para /
gamesRoutes => esta vai para /api/games

#depois importar morgan e cors e executar:
npm i @types/morgan @types/cors -D

Configurar o morgan cors e o express

# Database -- Using mysql

Criar o BD
depois dentro de 'source' incluir
database.ts (para conectar ao BD)
e
keys.ts (para Configurar a chave de acesso)

Criar os controllers para conectar ao BD e enviar os dados pelas Rotas


# REST API -- Usando NodeJS e mysql

https://www.getpostman.com/downloads/ <-- programa para testar o envio de POST para o servidor uma aplicação
neste dá para simular o envio de conteúdo através do POST
em HEADERS
key=Content-Type value=application/json
em BODY (*raw)
{
  "title": "Detroit Become Human",
  "description": "A ps4 game",
  "image": "https://www.meups4.com.br/wp-content/uploads/2017/06/Detroit-Become-Human.jpg"
}

{
  "title": "Undertale",
  "description": "A second ps4 game",
  "image": "https://i.ytimg.com/vi/MT4hxXRK-Zo/maxresdefault.jpg"
}



no backend criar metodos assinconos para manipular o BD

public async create (req: Request, res: Response): Promise<void> {
  await pool.query('INSERT INTO games set ?', [req.body]);
  res.json({message: 'Game Saved'});
}


-----------------------------
-----------------------------


FrontEnd

npm install -g @angular/cli
ng new client --routing  (cria client e pasta app)
cd client
ng g c components/navigation (generate component de navegação)
ng g c components/game-form
ng g c components/game-list

cd src/app
mkdir models   (para armazenar os modelos)
echo "" > Game.ts
cd ../../.. #volta para o client

ng g s services/games   (cria um serviço)

## iniciar o serviço FrontEnd o Angular
ng serve
O serviço inicia em: http://localhost:4200/

Alterar o app.component.html (deixar só a última linha do route) e incluir o
<app-navigation></app-navigation>

Isso insere o navigation.component.html

Entrar no site do bootstrap e copiar o link para o CSS:
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

Colar dentro do client/src/index.html

https://getbootstrap.com.br/docs/4.1/examples/

Copiar um modelo para a barra de navegação e colar no componente específico
Fazer as edições ex.: <a class="nav-link" href="/games/add">ADD Game</a>
========
<div class="conteiner">
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="/">ngMySql CRUD</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Alterna navegação">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav ml-auto">
        <li class="nav-item">
          <a class="nav-link" href="/games">Games</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/games/add">ADD Game</a>
        </li>
      </ul>
    </div>
  </nav>
========

Dica: acessar o site de modelos Free:
https://bootswatch.com/

Olhar um modelo e copiar o link para o css dele:
https://bootswatch.com/4/pulse/bootstrap.min.css

Mudar o CSS no index


Criar ROTAS para a interface:
=============================
* Abrir em app o arquivo "app-routing.module.ts"
Mudar Routes = [ AQUI ]
[
  {
   path: '',             //// o caminho inicial será redirecionado para /games (abaixo)
   redirectTo: '/games',
   pathMatch: 'full'     //// necessário incluir esta linha
  },
  {
    path: 'games',
    component: GameListComponent
  },
]

precisa importar o componente no AppRoutingModule:
import { GameListComponent } from './components/game-list/game-list.component';



Incluir em "app.component.html" conteiners para configurar os componentes
---------------------------
<div class="conteiner p-4">
  <router-outlet></router-outlet>
</div>
---------------------------
Ajustar o navigation para que fique dentro de um container tbm:
<div class="conteiner">
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    ... Igual acima
  </nav>
</div>
---------------------------


Para obter os dados dos GAMES devemos configurar os SERVICES de APP:
=> Configurando as rotas
GamesService.ts

em app.module.ts, importar a classe de serviço games (GamesService) e Preencher o providers[]
em games.service.ts deve-se fazer: import { HttpClient } from '@angular/commom/http';
e codificar o construtor e os métodos para acessar os servicos

------app.module----------------------------
import { GamesService } from "./services/games.service";
...
providers: [
  GamesService
],
----------------------------------

------games.service----------------------------
import { HttpClient } from '@angular/common/http';
...
getGames(){
  return this.http.get(`${this.API_URI}/games`);
}

getGame(id: string){
  return this.http.get(`${this.API_URI}/games/${id}`);
}

deleteGame(id: string){
  return this.http.delete(`${this.API_URI}/games/${id}`);
}

saveGame(game: Game){
  return this.http.post(`${this.API_URI}/games`, game);
}

updateGame(id: string, game: Game): Observable<Game>{
  return this.http.put(`${this.API_URI}/games/${id}`, game);
}
----------------------------------

em Models/Game.ts
criamos as Interfaces para os modelos de dados:
----------------------
export interface Game{
  id?: number,
  title?: string,
  description?: string,
  image?: string,
  created_at?: Date
}
----------------------

Em app.module incluir o modulo de http:
import { HttpClientModule } from "@angular/common/http";
...
imports: [
  ...,
  HttpClientModule
],


Importar o serviço dentro de game-list.component.ts
-----------------
import { GamesService } from "../../services/games.service";
...
constructor(private gamesService: GamesService) { }

@HostBinding('class') classes = 'row'; // Organizar em linhas

ngOnInit() {
  this.gamesService.getGames().subscribe(
    res => console.log(res),  // Resposta via console
    err => console.error(err) // error
  )
}
-----------------

Armazenar o Games em uma estrutura de Any:
games: any = [];
constructor(private gamesService: GamesService) { }
ngOnInit() {
  this.gamesService.getGames().subscribe(
    res => {
      this.games = res;
    },  // Resposta
    err => console.error(err) // error
  )
}


Depois obter esses objetos no HTML através de ngFor
<div class="col-md-4" *ngFor="let game of games">
  <div class="card text-center">
    <div class="card-header">
      {{game.title}}
    </div>
  </div>
</div>



Incluir o corpo do jogo (Primeiro configurar FONTAWESOME.COM)
E terminar de configurar a apresentação dos itens retornados pelo ngFor
<div class="col-md-4" *ngFor="let game of games">
  <div class="card text-center">
    <div class="card-header bg-dark text-white d-flex justify-content-beetwen align-itens-center">
      {{game.title}}
      <button class="btn btn-danger">
        <i class="far fa-trash-alt"></i>
      </button>
    </div>
    <img [src]="game.image" class="card-img-top">
    <div class="card-body">
      <p>{{game.description}}</p>
      <a href="#" class="btn btn-info btn-block">
        EDIT GAME
      </a>
    </div>
  </div>
</div>



Depois mudar em navigation de HREF para routerLink (usar ajax)

<li class="nav-item">
  <a class="nav-link" routerLink="/games">Games</a>
</li>
<li class="nav-item">
  <a class="nav-link" routerLink="/games/add">ADD Game</a>
</li>





Repetir para GameFormComponent, na rota game/add
GAME-FORM.COMPONENTE.HTML
=========================
<div class="col-md-4 offset-md-4">
  <div class="card">
    <div class="card-body">
      <form>
        <div class="form-group">
          <input type="text" name="title" [(ngModel)]="game.title" placeholder="Title" class="form-control" autofocus>
        </div>
        <div class="form-group">
          <textarea name="description" [(ngModel)]="game.description" placeholder="Description" rows="2" class="form-control"></textarea>
        </div>
        <div class="form-group">
          <input type="url" name="image" [(ngModel)]="game.image" placeholder="Image" class="form-control">
        </div>
        <button class="btn btn-success btn-block" (click)="saveNewGame()">
          SAVE
        </button>
      </form>
    </div>
  </div>
</div>




GAME-FORM.COMPONENT.TS
======================
...
import { Game } from 'src/app/models/Game';
import { GamesService } from 'src/app/services/games.service';
...
export class GameFormComponent implements OnInit {

  @HostBinding('class') classes = "row";

  game: Game = {
    id: 0,
    title: '',
    description: '',
    image: '',
    created_at: new Date()
  };
...
saveNewGame(){
  //console.log(this.game);
  delete this.game.created_at;
  delete this.game.id;
  this.gamesService.saveGame(this.game)
    .subscribe(
      res => {
        console.log(res);
      },
      err => console.error(err)
    )
}


APP.MODULE.TS
=============
...
import { FormsModule } from "@angular/forms";
...
  imports: [
    ...
    FormsModule
  ],
